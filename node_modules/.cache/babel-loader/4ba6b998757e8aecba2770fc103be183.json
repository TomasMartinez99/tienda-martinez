{"ast":null,"code":"var _jsxFileName = \"C:\\\\wamp64\\\\www\\\\tienda-martinez\\\\src\\\\context\\\\CartContext.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\"; // Array para almacenar los productos agregados\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CartContext = /*#__PURE__*/React.createContext([]); // CartComponentProvider es el proveedor de nuestro CartContext\n\nexport const CartComponentProvider = ({\n  children\n}) => {\n  _s();\n\n  // Cantidad de los productos agregados\n  const [quantity, setQuantity] = useState(0);\n  const [aggregateItems, setAggregateItems] = useState([]);\n\n  const addItem = (smartwatch, itemCount) => {\n    const smartwatchId = smartwatch.itemToShow.id;\n    const dupAggregateItems = [...aggregateItems]; // Buscamos si coincide el id del item a agregar con los que tenemos agregados\n\n    const found = dupAggregateItems.find(element => {\n      return element.smartwatch.itemToShow.id === smartwatchId;\n    }); // Condición para saber si el item está agregado\n\n    if (found) {\n      alert(\"Item duplicado\");\n      dupAggregateItems.map(item => {\n        if (found) {\n          const sum = found.itemCount;\n          found.itemCount = sum + itemCount;\n        }\n      }); // si es el mismo, incrementas itemCount dentro de DupAggregateItems\n\n      /**\r\n       * escribí tu codigo aca\r\n       */\n\n      setAggregateItems(dupAggregateItems);\n      setQuantity(quantity + itemCount);\n    } else {\n      setAggregateItems([...aggregateItems, {\n        smartwatch,\n        itemCount\n      }]);\n      setQuantity(quantity + itemCount);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      aggregateItems,\n      setAggregateItems,\n      addItem,\n      quantity,\n      setQuantity\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CartComponentProvider, \"I5UABz+q8rvLqkqXx2b3Sp9Fjlg=\");\n\n_c = CartComponentProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartComponentProvider\");","map":{"version":3,"sources":["C:/wamp64/www/tienda-martinez/src/context/CartContext.jsx"],"names":["React","useState","CartContext","createContext","CartComponentProvider","children","quantity","setQuantity","aggregateItems","setAggregateItems","addItem","smartwatch","itemCount","smartwatchId","itemToShow","id","dupAggregateItems","found","find","element","alert","map","item","sum"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC,C,CAEA;;;AACA,OAAO,MAAMC,WAAW,gBAAGF,KAAK,CAACG,aAAN,CAAoB,EAApB,CAApB,C,CAEP;;AACA,OAAO,MAAMC,qBAAqB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AACrD;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BN,QAAQ,CAAC,CAAD,CAAxC;AACA,QAAM,CAACO,cAAD,EAAiBC,iBAAjB,IAAsCR,QAAQ,CAAC,EAAD,CAApD;;AAEA,QAAMS,OAAO,GAAG,CAACC,UAAD,EAAaC,SAAb,KAA2B;AACzC,UAAMC,YAAY,GAAGF,UAAU,CAACG,UAAX,CAAsBC,EAA3C;AACA,UAAMC,iBAAiB,GAAG,CAAC,GAAGR,cAAJ,CAA1B,CAFyC,CAIzC;;AACA,UAAMS,KAAK,GAAGD,iBAAiB,CAACE,IAAlB,CAAwBC,OAAD,IAAa;AAChD,aAAOA,OAAO,CAACR,UAAR,CAAmBG,UAAnB,CAA8BC,EAA9B,KAAqCF,YAA5C;AACD,KAFa,CAAd,CALyC,CASzC;;AACA,QAAII,KAAJ,EAAW;AACTG,MAAAA,KAAK,CAAC,gBAAD,CAAL;AACAJ,MAAAA,iBAAiB,CAACK,GAAlB,CAAuBC,IAAD,IAAU;AAC9B,YAAIL,KAAJ,EAAW;AACT,gBAAMM,GAAG,GAAGN,KAAK,CAACL,SAAlB;AACAK,UAAAA,KAAK,CAACL,SAAN,GAAkBW,GAAG,GAAGX,SAAxB;AACD;AACF,OALD,EAFS,CAQT;;AACA;AACN;AACA;;AACMH,MAAAA,iBAAiB,CAACO,iBAAD,CAAjB;AACAT,MAAAA,WAAW,CAACD,QAAQ,GAAGM,SAAZ,CAAX;AACD,KAdD,MAcO;AACLH,MAAAA,iBAAiB,CAAC,CAAC,GAAGD,cAAJ,EAAoB;AAAEG,QAAAA,UAAF;AAAcC,QAAAA;AAAd,OAApB,CAAD,CAAjB;AACAL,MAAAA,WAAW,CAACD,QAAQ,GAAGM,SAAZ,CAAX;AACD;AACF,GA5BD;;AA8BA,sBACE,QAAC,WAAD,CAAa,QAAb;AACE,IAAA,KAAK,EAAE;AACLJ,MAAAA,cADK;AAELC,MAAAA,iBAFK;AAGLC,MAAAA,OAHK;AAILJ,MAAAA,QAJK;AAKLC,MAAAA;AALK,KADT;AAAA,cAUGF;AAVH;AAAA;AAAA;AAAA;AAAA,UADF;AAcD,CAjDM;;GAAMD,qB;;KAAAA,qB","sourcesContent":["import React, { useState } from \"react\";\r\n\r\n// Array para almacenar los productos agregados\r\nexport const CartContext = React.createContext([]);\r\n\r\n// CartComponentProvider es el proveedor de nuestro CartContext\r\nexport const CartComponentProvider = ({ children }) => {\r\n  // Cantidad de los productos agregados\r\n  const [quantity, setQuantity] = useState(0);\r\n  const [aggregateItems, setAggregateItems] = useState([]);\r\n\r\n  const addItem = (smartwatch, itemCount) => {\r\n    const smartwatchId = smartwatch.itemToShow.id;\r\n    const dupAggregateItems = [...aggregateItems];\r\n\r\n    // Buscamos si coincide el id del item a agregar con los que tenemos agregados\r\n    const found = dupAggregateItems.find((element) => {\r\n      return element.smartwatch.itemToShow.id === smartwatchId;\r\n    });\r\n\r\n    // Condición para saber si el item está agregado\r\n    if (found) {\r\n      alert(\"Item duplicado\");\r\n      dupAggregateItems.map((item) => {\r\n        if (found) {\r\n          const sum = found.itemCount;\r\n          found.itemCount = sum + itemCount;\r\n        }\r\n      });\r\n      // si es el mismo, incrementas itemCount dentro de DupAggregateItems\r\n      /**\r\n       * escribí tu codigo aca\r\n       */\r\n      setAggregateItems(dupAggregateItems);\r\n      setQuantity(quantity + itemCount);\r\n    } else {\r\n      setAggregateItems([...aggregateItems, { smartwatch, itemCount }]);\r\n      setQuantity(quantity + itemCount);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <CartContext.Provider\r\n      value={{\r\n        aggregateItems,\r\n        setAggregateItems,\r\n        addItem,\r\n        quantity,\r\n        setQuantity,\r\n      }}\r\n    >\r\n      {/* Componentes que van a tener acceso */}\r\n      {children}\r\n    </CartContext.Provider>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}