{"ast":null,"code":"var _jsxFileName = \"C:\\\\wamp64\\\\www\\\\tienda-martinez\\\\src\\\\components\\\\context\\\\CartContext.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\"; // Array para almacenar los productos agregados\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CartContext = /*#__PURE__*/React.createContext([]); // CartComponentProvider es el proveedor de nuestro CartContext\n\nexport const CartComponentProvider = ({\n  children\n}) => {\n  _s();\n\n  const [quantity, setQuantity] = useState(0);\n  const [aggregateItems, setAggregateItems] = useState([]);\n\n  const addItem = (smartwatch, itemCount) => {\n    const check = smartwatch.every(item => {\n      return item.id !== id;\n    });\n\n    if (check) {\n      const data = smartwatch.filter(producto => {\n        return producto.id === id;\n      }); // Usamos el spread operator y le sumamos lo que recibe por par치metro (smartwatch)\n\n      setAggregateItems([...aggregateItems, {\n        smartwatch,\n        itemCount\n      }]);\n      setQuantity(quantity + itemCount);\n    } else {\n      alert(\"El producto se ha a침adido al carrito anteriormente\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      aggregateItems,\n      setAggregateItems,\n      addItem,\n      quantity\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CartComponentProvider, \"I5UABz+q8rvLqkqXx2b3Sp9Fjlg=\");\n\n_c = CartComponentProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartComponentProvider\");","map":{"version":3,"sources":["C:/wamp64/www/tienda-martinez/src/components/context/CartContext.jsx"],"names":["React","useState","useEffect","CartContext","createContext","CartComponentProvider","children","quantity","setQuantity","aggregateItems","setAggregateItems","addItem","smartwatch","itemCount","check","every","item","id","data","filter","producto","alert"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C,C,CAEA;;;AACA,OAAO,MAAMC,WAAW,gBAAGH,KAAK,CAACI,aAAN,CAAoB,EAApB,CAApB,C,CAEP;;AACA,OAAO,MAAMC,qBAAqB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AACrD,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAAC,CAAD,CAAxC;AACA,QAAM,CAACQ,cAAD,EAAiBC,iBAAjB,IAAsCT,QAAQ,CAAC,EAAD,CAApD;;AAEA,QAAMU,OAAO,GAAG,CAACC,UAAD,EAAaC,SAAb,KAA2B;AACzC,UAAMC,KAAK,GAAGF,UAAU,CAACG,KAAX,CAAkBC,IAAD,IAAU;AACvC,aAAOA,IAAI,CAACC,EAAL,KAAYA,EAAnB;AACD,KAFa,CAAd;;AAGA,QAAIH,KAAJ,EAAW;AACT,YAAMI,IAAI,GAAGN,UAAU,CAACO,MAAX,CAAmBC,QAAD,IAAc;AAC3C,eAAOA,QAAQ,CAACH,EAAT,KAAgBA,EAAvB;AACD,OAFY,CAAb,CADS,CAIT;;AACAP,MAAAA,iBAAiB,CAAC,CAAC,GAAGD,cAAJ,EAAoB;AAAEG,QAAAA,UAAF;AAAcC,QAAAA;AAAd,OAApB,CAAD,CAAjB;AACAL,MAAAA,WAAW,CAACD,QAAQ,GAAGM,SAAZ,CAAX;AACD,KAPD,MAOO;AACLQ,MAAAA,KAAK,CAAC,oDAAD,CAAL;AACD;AACF,GAdD;;AAgBA,sBACE,QAAC,WAAD,CAAa,QAAb;AACE,IAAA,KAAK,EAAE;AACLZ,MAAAA,cADK;AAELC,MAAAA,iBAFK;AAGLC,MAAAA,OAHK;AAILJ,MAAAA;AAJK,KADT;AAAA,cASGD;AATH;AAAA;AAAA;AAAA;AAAA,UADF;AAaD,CAjCM;;GAAMD,qB;;KAAAA,qB","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\n// Array para almacenar los productos agregados\r\nexport const CartContext = React.createContext([]);\r\n\r\n// CartComponentProvider es el proveedor de nuestro CartContext\r\nexport const CartComponentProvider = ({ children }) => {\r\n  const [quantity, setQuantity] = useState(0);\r\n  const [aggregateItems, setAggregateItems] = useState([]);\r\n\r\n  const addItem = (smartwatch, itemCount) => {\r\n    const check = smartwatch.every((item) => {\r\n      return item.id !== id;\r\n    });\r\n    if (check) {\r\n      const data = smartwatch.filter((producto) => {\r\n        return producto.id === id;\r\n      });\r\n      // Usamos el spread operator y le sumamos lo que recibe por par치metro (smartwatch)\r\n      setAggregateItems([...aggregateItems, { smartwatch, itemCount }]);\r\n      setQuantity(quantity + itemCount);\r\n    } else {\r\n      alert(\"El producto se ha a침adido al carrito anteriormente\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <CartContext.Provider\r\n      value={{\r\n        aggregateItems,\r\n        setAggregateItems,\r\n        addItem,\r\n        quantity,\r\n      }}\r\n    >\r\n      {/* Componentes que van a tener acceso */}\r\n      {children}\r\n    </CartContext.Provider>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}