{"ast":null,"code":"var _jsxFileName = \"C:\\\\wamp64\\\\www\\\\tienda-martinez\\\\src\\\\context\\\\CartContext.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\"; // Array para almacenar los productos agregados\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CartContext = /*#__PURE__*/React.createContext([]); // CartComponentProvider es el proveedor de nuestro CartContext\n\nexport const CartComponentProvider = ({\n  children\n}) => {\n  _s();\n\n  // Cantidad de los productos agregados\n  const [quantity, setQuantity] = useState(0);\n  const [aggregateItems, setAggregateItems] = useState([]);\n\n  const addItem = (smartwatch, itemCount) => {\n    const smartwatchId = smartwatch.itemToShow.id; // Buscamos si coincide el id del item a agregar con los que tenemos agregados\n\n    const found = aggregateItems.find(element => {\n      return element.smartwatch.itemToShow.id === smartwatchId;\n    }); // Condici칩n para saber si el item est치 agregado\n\n    if (found) {\n      alert(\"Item duplicado\");\n      itemCount = itemCount + found.itemCount;\n      const DupAggregateItems = aggregateItems.slice();\n      const newCarts = DupAggregateItems.map(newCart => {\n        console.log(newCart.smartwatch.itemToShow.id);\n        return { ...newCart,\n          itemCount\n        };\n      });\n      setAggregateItems(newCarts);\n      /* setAggregateItems([...aggregateItems, { smartwatch, itemCount }]); */\n\n      setQuantity(quantity + itemCount);\n    } else {\n      setAggregateItems([...aggregateItems, {\n        smartwatch,\n        itemCount\n      }]);\n      setQuantity(quantity + itemCount);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      aggregateItems,\n      setAggregateItems,\n      addItem,\n      quantity,\n      setQuantity\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CartComponentProvider, \"I5UABz+q8rvLqkqXx2b3Sp9Fjlg=\");\n\n_c = CartComponentProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartComponentProvider\");","map":{"version":3,"sources":["C:/wamp64/www/tienda-martinez/src/context/CartContext.jsx"],"names":["React","useState","CartContext","createContext","CartComponentProvider","children","quantity","setQuantity","aggregateItems","setAggregateItems","addItem","smartwatch","itemCount","smartwatchId","itemToShow","id","found","find","element","alert","DupAggregateItems","slice","newCarts","map","newCart","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC,C,CAEA;;;AACA,OAAO,MAAMC,WAAW,gBAAGF,KAAK,CAACG,aAAN,CAAoB,EAApB,CAApB,C,CAEP;;AACA,OAAO,MAAMC,qBAAqB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AACrD;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BN,QAAQ,CAAC,CAAD,CAAxC;AACA,QAAM,CAACO,cAAD,EAAiBC,iBAAjB,IAAsCR,QAAQ,CAAC,EAAD,CAApD;;AAEA,QAAMS,OAAO,GAAG,CAACC,UAAD,EAAaC,SAAb,KAA2B;AACzC,UAAMC,YAAY,GAAGF,UAAU,CAACG,UAAX,CAAsBC,EAA3C,CADyC,CAGzC;;AACA,UAAMC,KAAK,GAAGR,cAAc,CAACS,IAAf,CAAqBC,OAAD,IAAa;AAC7C,aAAOA,OAAO,CAACP,UAAR,CAAmBG,UAAnB,CAA8BC,EAA9B,KAAqCF,YAA5C;AACD,KAFa,CAAd,CAJyC,CAQzC;;AACA,QAAIG,KAAJ,EAAW;AACTG,MAAAA,KAAK,CAAC,gBAAD,CAAL;AAEAP,MAAAA,SAAS,GAAGA,SAAS,GAAGI,KAAK,CAACJ,SAA9B;AACA,YAAMQ,iBAAiB,GAAGZ,cAAc,CAACa,KAAf,EAA1B;AACA,YAAMC,QAAQ,GAAGF,iBAAiB,CAACG,GAAlB,CAAuBC,OAAD,IAAa;AAClDC,QAAAA,OAAO,CAACC,GAAR,CAAYF,OAAO,CAACb,UAAR,CAAmBG,UAAnB,CAA8BC,EAA1C;AACA,eAAO,EACL,GAAGS,OADE;AAELZ,UAAAA;AAFK,SAAP;AAID,OANgB,CAAjB;AAOAH,MAAAA,iBAAiB,CAACa,QAAD,CAAjB;AAEA;;AACAf,MAAAA,WAAW,CAACD,QAAQ,GAAGM,SAAZ,CAAX;AACD,KAhBD,MAgBO;AACLH,MAAAA,iBAAiB,CAAC,CAAC,GAAGD,cAAJ,EAAoB;AAAEG,QAAAA,UAAF;AAAcC,QAAAA;AAAd,OAApB,CAAD,CAAjB;AACAL,MAAAA,WAAW,CAACD,QAAQ,GAAGM,SAAZ,CAAX;AACD;AACF,GA7BD;;AA+BA,sBACE,QAAC,WAAD,CAAa,QAAb;AACE,IAAA,KAAK,EAAE;AACLJ,MAAAA,cADK;AAELC,MAAAA,iBAFK;AAGLC,MAAAA,OAHK;AAILJ,MAAAA,QAJK;AAKLC,MAAAA;AALK,KADT;AAAA,cAUGF;AAVH;AAAA;AAAA;AAAA;AAAA,UADF;AAcD,CAlDM;;GAAMD,qB;;KAAAA,qB","sourcesContent":["import React, { useState } from \"react\";\r\n\r\n// Array para almacenar los productos agregados\r\nexport const CartContext = React.createContext([]);\r\n\r\n// CartComponentProvider es el proveedor de nuestro CartContext\r\nexport const CartComponentProvider = ({ children }) => {\r\n  // Cantidad de los productos agregados\r\n  const [quantity, setQuantity] = useState(0);\r\n  const [aggregateItems, setAggregateItems] = useState([]);\r\n\r\n  const addItem = (smartwatch, itemCount) => {\r\n    const smartwatchId = smartwatch.itemToShow.id;\r\n\r\n    // Buscamos si coincide el id del item a agregar con los que tenemos agregados\r\n    const found = aggregateItems.find((element) => {\r\n      return element.smartwatch.itemToShow.id === smartwatchId;\r\n    });\r\n\r\n    // Condici칩n para saber si el item est치 agregado\r\n    if (found) {\r\n      alert(\"Item duplicado\");\r\n\r\n      itemCount = itemCount + found.itemCount;\r\n      const DupAggregateItems = aggregateItems.slice();\r\n      const newCarts = DupAggregateItems.map((newCart) => {\r\n        console.log(newCart.smartwatch.itemToShow.id);\r\n        return {\r\n          ...newCart,\r\n          itemCount,\r\n        };\r\n      });\r\n      setAggregateItems(newCarts);\r\n\r\n      /* setAggregateItems([...aggregateItems, { smartwatch, itemCount }]); */\r\n      setQuantity(quantity + itemCount);\r\n    } else {\r\n      setAggregateItems([...aggregateItems, { smartwatch, itemCount }]);\r\n      setQuantity(quantity + itemCount);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <CartContext.Provider\r\n      value={{\r\n        aggregateItems,\r\n        setAggregateItems,\r\n        addItem,\r\n        quantity,\r\n        setQuantity,\r\n      }}\r\n    >\r\n      {/* Componentes que van a tener acceso */}\r\n      {children}\r\n    </CartContext.Provider>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}