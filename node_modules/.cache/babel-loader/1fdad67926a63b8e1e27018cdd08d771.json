{"ast":null,"code":"var _jsxFileName = \"C:\\\\wamp64\\\\www\\\\tienda-martinez\\\\src\\\\components\\\\context\\\\CartContext.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\"; // Array para almacenar los productos agregados\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CartContext = /*#__PURE__*/React.createContext([]); // CartComponentProvider es el proveedor de nuestro CartContext\n\nexport const CartComponentProvider = ({\n  children\n}) => {\n  _s();\n\n  // Cantidad de los productos agregados\n  const [quantity, setQuantity] = useState(0);\n  const [aggregateItems, setAggregateItems] = useState([]);\n  const [itemCount, setItemCount] = useState(1);\n\n  const addItem = (smartwatch, itemCount) => {\n    const smartwatchId = smartwatch.itemToShow.id; // Buscamos si coincide el id del item a agregar con los que tenemos agregados\n\n    const found = aggregateItems.find(element => {\n      return element.smartwatch.itemToShow.id === smartwatchId;\n    }); // Condici칩n para saber si el item est치 agregado\n\n    if (found) {\n      alert(\"item duplicado\");\n      setItemCount = itemCount + found.itemCount;\n    } else {\n      setAggregateItems([...aggregateItems, {\n        smartwatch,\n        itemCount\n      }]);\n      setQuantity(quantity + itemCount);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      aggregateItems,\n      setAggregateItems,\n      addItem,\n      quantity,\n      setQuantity\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CartComponentProvider, \"3RPEtGJKSXtSt1G2gczfV1tmEJs=\");\n\n_c = CartComponentProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartComponentProvider\");","map":{"version":3,"sources":["C:/wamp64/www/tienda-martinez/src/components/context/CartContext.jsx"],"names":["React","useState","CartContext","createContext","CartComponentProvider","children","quantity","setQuantity","aggregateItems","setAggregateItems","itemCount","setItemCount","addItem","smartwatch","smartwatchId","itemToShow","id","found","find","element","alert"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC,C,CAEA;;;AACA,OAAO,MAAMC,WAAW,gBAAGF,KAAK,CAACG,aAAN,CAAoB,EAApB,CAApB,C,CAEP;;AACA,OAAO,MAAMC,qBAAqB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AACrD;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BN,QAAQ,CAAC,CAAD,CAAxC;AACA,QAAM,CAACO,cAAD,EAAiBC,iBAAjB,IAAsCR,QAAQ,CAAC,EAAD,CAApD;AACA,QAAM,CAACS,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,CAAD,CAA1C;;AAEA,QAAMW,OAAO,GAAG,CAACC,UAAD,EAAaH,SAAb,KAA2B;AACzC,UAAMI,YAAY,GAAGD,UAAU,CAACE,UAAX,CAAsBC,EAA3C,CADyC,CAGzC;;AACA,UAAMC,KAAK,GAAGT,cAAc,CAACU,IAAf,CAAqBC,OAAD,IAAa;AAC7C,aAAOA,OAAO,CAACN,UAAR,CAAmBE,UAAnB,CAA8BC,EAA9B,KAAqCF,YAA5C;AACD,KAFa,CAAd,CAJyC,CAQzC;;AACA,QAAIG,KAAJ,EAAW;AACTG,MAAAA,KAAK,CAAC,gBAAD,CAAL;AACAT,MAAAA,YAAY,GAAGD,SAAS,GAAGO,KAAK,CAACP,SAAjC;AACD,KAHD,MAGO;AACLD,MAAAA,iBAAiB,CAAC,CAAC,GAAGD,cAAJ,EAAoB;AAAEK,QAAAA,UAAF;AAAcH,QAAAA;AAAd,OAApB,CAAD,CAAjB;AACAH,MAAAA,WAAW,CAACD,QAAQ,GAAGI,SAAZ,CAAX;AACD;AACF,GAhBD;;AAkBA,sBACE,QAAC,WAAD,CAAa,QAAb;AACE,IAAA,KAAK,EAAE;AACLF,MAAAA,cADK;AAELC,MAAAA,iBAFK;AAGLG,MAAAA,OAHK;AAILN,MAAAA,QAJK;AAKLC,MAAAA;AALK,KADT;AAAA,cAUGF;AAVH;AAAA;AAAA;AAAA;AAAA,UADF;AAcD,CAtCM;;GAAMD,qB;;KAAAA,qB","sourcesContent":["import React, { useState } from \"react\";\r\n\r\n// Array para almacenar los productos agregados\r\nexport const CartContext = React.createContext([]);\r\n\r\n// CartComponentProvider es el proveedor de nuestro CartContext\r\nexport const CartComponentProvider = ({ children }) => {\r\n  // Cantidad de los productos agregados\r\n  const [quantity, setQuantity] = useState(0);\r\n  const [aggregateItems, setAggregateItems] = useState([]);\r\n  const [itemCount, setItemCount] = useState(1);\r\n\r\n  const addItem = (smartwatch, itemCount) => {\r\n    const smartwatchId = smartwatch.itemToShow.id;\r\n\r\n    // Buscamos si coincide el id del item a agregar con los que tenemos agregados\r\n    const found = aggregateItems.find((element) => {\r\n      return element.smartwatch.itemToShow.id === smartwatchId;\r\n    });\r\n\r\n    // Condici칩n para saber si el item est치 agregado\r\n    if (found) {\r\n      alert(\"item duplicado\");\r\n      setItemCount = itemCount + found.itemCount;\r\n    } else {\r\n      setAggregateItems([...aggregateItems, { smartwatch, itemCount }]);\r\n      setQuantity(quantity + itemCount);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <CartContext.Provider\r\n      value={{\r\n        aggregateItems,\r\n        setAggregateItems,\r\n        addItem,\r\n        quantity,\r\n        setQuantity,\r\n      }}\r\n    >\r\n      {/* Componentes que van a tener acceso */}\r\n      {children}\r\n    </CartContext.Provider>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}